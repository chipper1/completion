require "./completion/*"
require "option_parser"

module Completion

  class Completer

    getter last_word
    getter line
    getter fragment

    def initialize(@program)
      @fragments = [] of Symbol
      @listeners = {} of Symbol => Array(String|Symbol|Nil)
      @install = ARGV.includes? "--completion"
      @compgen = ARGV.includes? "--compgen"

      if @compgen
        @comp_starts_at = ARGV.index "--compgen"
        if @comp_starts_at
          starts = Int32.cast @comp_starts_at
          @fragment = ARGV[starts + 1].to_i
          @last_word = ARGV[starts + 2]
          @line = ARGV[starts + 3]
        end
      end

      if @install
        puts installer
      end
    end

    def set_fragments(@fragments)
    end

    def reply(fragment, reply)
      @listeners[fragment] = reply
    end

    def init
      if @compgen
        fragment = @fragment as Int32
        begin
          completions = @listeners[@fragments[fragment-1]]
        rescue
          completions = Dir.entries Dir.current
        end
        puts completions.join "\n"
      end
    end

    def installer
      completion = "__#{@program}_completion"
      "### #{@program} completion - begin. generated by f/completion ###
if type complete &>/dev/null; then
  #{completion}() {
    COMPREPLY=( $(compgen -W '$(#{@program} --compbash --compgen \"${COMP_CWORD}\" \"${COMP_WORDS[COMP_CWORD-1]}\" \"${COMP_LINE}\")' -- \"${COMP_WORDS[COMP_CWORD]}\") )
  }
  complete -F #{completion} #{@program}
fi
### #{@program} completion - end ###
"
    end

  end
end
